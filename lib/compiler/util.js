"use strict";

var version = require('../version');

exports.babelOptions = function(options) {
	options.babel = options.babel || {};
	var babelOpts = {
		// Setting this will remove the currently hooked extensions of .es6, `.es`, `.jsx`
		// and .js so you'll have to add them back if you want them to be used again.
		plugins: ['streamline-plugin'],
		extensions: ["._js"],
		//cache: false,
	};
	if (options.cache != null) options.babel.cache = options.cache;
	Object.keys(options.babel).forEach(function(opt) {
		if (options.babel[opt] != null) babelOpts[opt] = options.babel[opt];
	});
	return babelOpts;
};

exports.canCompile = function(path) {
	return /\._?(js|coffee)$/.test(path);
};

exports.banner = function(options) {
	var optStr = "";
	if (options.standalone) optStr += " --standalone";
	if (options.aggressive) optStr += " --aggressive";
	return "/*** Generated by streamline " + version + optStr + " - DO NOT EDIT ***/";
};

exports.parseShebang = function(content) {
	if (content[0] === '#' && content[1] === '!') {
		var n = content.indexOf("\n");
		var le = "\n";
		if (n !== -1) {
			var shebang = content.substr(0, n);
			if (shebang[shebang.length - 1] === "\r") {
				le = "\r\n";
				shebang = shebang.substr(0, shebang.length - 1);
			}
			content = content.substr(n + 1);
			return [shebang, content, le];
		}
	}
	return ['', content, ''];
};

exports.deprecate = function(module, message) {
	Object.keys(module.exports).forEach(function(name) {
		var fn = module.exports[name];
		if (typeof fn === 'function') {
			module.exports[name] = function() {
				if (!module.warned) console.warn("Module " + module.id + " is deprecated: " + message);
				module.warned = true;
				return fn.apply(this, arguments);
			};
		}
	})
};